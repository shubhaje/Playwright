"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([["7770"],{2121:function(e,t,n){n.r(t),n.d(t,{default:()=>u,frontMatter:()=>o,metadata:()=>a,assets:()=>i,toc:()=>c,contentTitle:()=>l});var a=JSON.parse('{"id":"test-global-setup-teardown","title":"Global setup and teardown","description":"Introduction","source":"@site/versioned_docs/version-stable/test-global-setup-teardown.mdx","sourceDirName":".","slug":"/test-global-setup-teardown","permalink":"/docs/test-global-setup-teardown","draft":false,"unlisted":false,"tags":[],"version":"stable","frontMatter":{"id":"test-global-setup-teardown","title":"Global setup and teardown"},"sidebar":"docs","previous":{"title":"Fixtures","permalink":"/docs/test-fixtures"},"next":{"title":"Parallelism","permalink":"/docs/test-parallel"}}'),s=n("5893"),r=n("65");n("8168"),n("7645"),n("2079");let o={id:"test-global-setup-teardown",title:"Global setup and teardown"},l=void 0,i={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Option 1: Project Dependencies",id:"option-1-project-dependencies",level:2},{value:"Setup",id:"setup",level:3},{value:"Teardown",id:"teardown",level:3},{value:"More examples",id:"more-examples",level:3},{value:"Option 2: Configure globalSetup and globalTeardown",id:"option-2-configure-globalsetup-and-globalteardown",level:2},{value:"Example",id:"example",level:3},{value:"Capturing trace of failures during global setup",id:"capturing-trace-of-failures-during-global-setup",level:3}];function d(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(t.p,{children:["There are two ways to configure global setup and teardown: using a global setup file and setting it in the config under ",(0,s.jsx)(t.a,{href:"#option-2-configure-globalsetup-and-globalteardown",children:(0,s.jsx)(t.code,{children:"globalSetup"})})," or using ",(0,s.jsx)(t.a,{href:"#option-1-project-dependencies",children:"project dependencies"}),". With project dependencies, you define a project that runs before all other projects. This is the recommended way to configure global setup as with Project dependencies your HTML report will show the global setup, trace viewer will record a trace of the setup and fixtures can be used."]}),"\n",(0,s.jsx)(t.h2,{id:"option-1-project-dependencies",children:"Option 1: Project Dependencies"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"./api/class-testproject#test-project-dependencies",children:"Project dependencies"})," are a list of projects that need to run before the tests in another project run. They can be useful for configuring the global setup actions so that one project depends on this running first. Using dependencies allows global setup to produce traces and other artifacts."]}),"\n",(0,s.jsx)(t.h3,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(t.p,{children:["First we add a new project with the name 'setup db'. We then give it a ",(0,s.jsx)(t.a,{href:"/docs/api/class-testproject#test-project-test-match",children:"testProject.testMatch"})," property in order to match the file called ",(0,s.jsx)(t.code,{children:"global.setup.ts"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n    },\n    // {\n    //   other project\n    // }\n  ]\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Then we add the ",(0,s.jsx)(t.a,{href:"/docs/api/class-testproject#test-project-dependencies",children:"testProject.dependencies"})," property to our projects that depend on the setup project and pass into the array the name of our dependency project, which we defined in the previous step:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n    },\n    {\n      name: 'chromium with db',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup db'],\n    },\n  ]\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example the 'chromium with db' project depends on the 'setup db' project. We then create a setup test, stored at root level of your project (note that setup and teardown code must be defined as regular tests by calling ",(0,s.jsx)(t.a,{href:"./api/class-test#test-call",children:"test()"})," function):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="tests/global.setup.ts"',children:"import { test as setup } from '@playwright/test';\n\nsetup('create new database', async ({ }) => {\n  console.log('creating new database...');\n  // Initialize the database\n});\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="tests/menu.spec.ts"',children:"import { test, expect } from '@playwright/test';\n\ntest('menu', async ({ page }) => {\n  // Your test that depends on the database\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"teardown",children:"Teardown"}),"\n",(0,s.jsxs)(t.p,{children:["You can teardown your setup by adding a ",(0,s.jsx)(t.a,{href:"/docs/api/class-testproject#test-project-teardown",children:"testProject.teardown"})," property to your setup project. This will run after all dependent projects have run."]}),"\n",(0,s.jsxs)(t.p,{children:["First we add the ",(0,s.jsx)(t.a,{href:"/docs/api/class-testproject#test-project-teardown",children:"testProject.teardown"})," property to our setup project with the name 'cleanup db' which is the name we gave to our teardown project in the previous step:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n      teardown: 'cleanup db',\n    },\n    {\n      name: 'cleanup db',\n      testMatch: /global\\.teardown\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup db'],\n    },\n  ]\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Then we create a ",(0,s.jsx)(t.code,{children:"global.teardown.ts"})," file in the tests directory of your project. This will be used to delete the data from the database after all tests have run."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="tests/global.teardown.ts"',children:"import { test as teardown } from '@playwright/test';\n\nteardown('delete database', async ({ }) => {\n  console.log('deleting test database...');\n  // Delete the database\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"more-examples",children:"More examples"}),"\n",(0,s.jsx)(t.p,{children:"For more detailed examples check out:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["our ",(0,s.jsx)(t.a,{href:"/docs/auth",children:"authentication"})," guide"]}),"\n",(0,s.jsxs)(t.li,{children:["our blog post ",(0,s.jsx)(t.a,{href:"https://dev.to/playwright/a-better-global-setup-in-playwright-reusing-login-with-project-dependencies-14",children:"A better global setup in Playwright reusing login with project dependencies"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://youtu.be/PI50YAPTAs4",children:"v1.31 release video"})," to see the demo"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"option-2-configure-globalsetup-and-globalteardown",children:"Option 2: Configure globalSetup and globalTeardown"}),"\n",(0,s.jsxs)(t.p,{children:["You can use the ",(0,s.jsx)(t.code,{children:"globalSetup"})," option in the ",(0,s.jsx)(t.a,{href:"/docs/test-configuration#advanced-configuration",children:"configuration file"})," to set something up once before running all tests. The global setup file must export a single function that takes a config object. This function will be run once before all the tests."]}),"\n",(0,s.jsxs)(t.p,{children:["Similarly, use ",(0,s.jsx)(t.code,{children:"globalTeardown"})," to run something once after all the tests. Alternatively, let ",(0,s.jsx)(t.code,{children:"globalSetup"})," return a function that will be used as a global teardown. You can pass data such as port number, authentication tokens, etc. from your global setup to your tests using environment variables."]}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsxs)(t.p,{children:["Beware of ",(0,s.jsx)(t.code,{children:"globalSetup"})," and ",(0,s.jsx)(t.code,{children:"globalTeardown"})," caveats:"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["These methods will not produce traces or artifacts unless explictly enabled, as described in ",(0,s.jsx)(t.a,{href:"#capturing-trace-of-failures-during-global-setup",children:"Capturing trace of failures during global setup"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Options sush as ",(0,s.jsx)(t.code,{children:"headless"})," or ",(0,s.jsx)(t.code,{children:"testIdAttribute"})," specified in the config file are not applied,"]}),"\n",(0,s.jsxs)(t.li,{children:["An uncaught exception thrown in ",(0,s.jsx)(t.code,{children:"globalSetup"})," will prevent Playwright from running tests, and no test results will appear in reporters."]}),"\n"]}),(0,s.jsxs)(t.p,{children:["Consider using ",(0,s.jsx)(t.a,{href:"#option-1-project-dependencies",children:"project dependencies"})," to produce traces, artifacts, respect config options and get test results in reporters even in case of a setup failure."]})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalSetup: require.resolve('./global-setup'),\n  globalTeardown: require.resolve('./global-teardown'),\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(t.p,{children:["Here is a global setup example that authenticates once and reuses authentication state in tests. It uses the ",(0,s.jsx)(t.code,{children:"baseURL"})," and ",(0,s.jsx)(t.code,{children:"storageState"})," options from the configuration file."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="global-setup.ts"',children:"import { chromium, type FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL, storageState } = config.projects[0].use;\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.goto(baseURL!);\n  await page.getByLabel('User Name').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByText('Sign in').click();\n  await page.context().storageState({ path: storageState as string });\n  await browser.close();\n}\n\nexport default globalSetup;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Specify ",(0,s.jsx)(t.code,{children:"globalSetup"}),", ",(0,s.jsx)(t.code,{children:"baseURL"})," and ",(0,s.jsx)(t.code,{children:"storageState"})," in the configuration file."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  globalSetup: require.resolve('./global-setup'),\n  use: {\n    baseURL: 'http://localhost:3000/',\n    storageState: 'state.json',\n  },\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Tests start already authenticated because we specify ",(0,s.jsx)(t.code,{children:"storageState"})," that was populated by global setup."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await page.goto('/');\n  // You are signed in!\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can make arbitrary data available in your tests from your global setup file by setting them as environment variables via ",(0,s.jsx)(t.code,{children:"process.env"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="global-setup.ts"',children:"import type { FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  process.env.FOO = 'some data';\n  // Or a more complicated data structure as JSON:\n  process.env.BAR = JSON.stringify({ some: 'data' });\n}\n\nexport default globalSetup;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Tests have access to the ",(0,s.jsx)(t.code,{children:"process.env"})," properties set in the global setup."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // environment variables which are set in globalSetup are only available inside test().\n  const { FOO, BAR } = process.env;\n\n  // FOO and BAR properties are populated.\n  expect(FOO).toEqual('some data');\n\n  const complexData = JSON.parse(BAR);\n  expect(BAR).toEqual({ some: 'data' });\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"capturing-trace-of-failures-during-global-setup",children:"Capturing trace of failures during global setup"}),"\n",(0,s.jsxs)(t.p,{children:["In some instances, it may be useful to capture a trace of failures encountered during the global setup. In order to do this, you must ",(0,s.jsx)(t.a,{href:"/docs/api/class-tracing#tracing-start",children:"start tracing"})," in your setup, and you must ensure that you ",(0,s.jsx)(t.a,{href:"/docs/api/class-tracing#tracing-stop",children:"stop tracing"})," if an error occurs before that error is thrown. This can be achieved by wrapping your setup in a ",(0,s.jsx)(t.code,{children:"try...catch"})," block.  Here is an example that expands the global setup example to capture a trace."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="global-setup.ts"',children:"import { chromium, type FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL, storageState } = config.projects[0].use;\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  try {\n    await context.tracing.start({ screenshots: true, snapshots: true });\n    await page.goto(baseURL!);\n    await page.getByLabel('User Name').fill('user');\n    await page.getByLabel('Password').fill('password');\n    await page.getByText('Sign in').click();\n    await context.storageState({ path: storageState as string });\n    await context.tracing.stop({\n      path: './test-results/setup-trace.zip',\n    });\n    await browser.close();\n  } catch (error) {\n    await context.tracing.stop({\n      path: './test-results/failed-setup-trace.zip',\n    });\n    await browser.close();\n    throw error;\n  }\n}\n\nexport default globalSetup;\n"})})]})}function u(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7645:function(e,t,n){n.d(t,{Z:()=>r});var a=n("5893");n("7294");var s=n("7026");function r(e){let{children:t,hidden:n,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.Z)("tabItem_Ymn6",r),hidden:n,children:t})}},8168:function(e,t,n){n.d(t,{Z:()=>j});var a=n("5893"),s=n("7294"),r=n("7026"),o=n("4718"),l=n("6550"),i=n("8714"),c=n("9207"),d=n("9413"),u=n("4510");function p(e){var t,n;return null!==(n=null===(t=s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===t?void 0:t.filter(Boolean))&&void 0!==n?n:[]}function h(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}var g=n("6735");function f(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:i}=e,c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),u=e=>{let t=e.currentTarget,n=i[c.indexOf(t)].value;n!==s&&(d(t),l(n))},p=e=>{var t,n;let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let n=c.indexOf(e.currentTarget)+1;a=null!==(t=c[n])&&void 0!==t?t:c[0];break}case"ArrowLeft":{let t=c.indexOf(e.currentTarget)-1;a=null!==(n=c[t])&&void 0!==n?n:c[c.length-1]}}null==a||a.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:i.map(e=>{let{value:t,label:n,attributes:o}=e;return(0,a.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>{c.push(e)},onKeyDown:p,onClick:u,...o,className:(0,r.Z)("tabs__item","tabItem_LNqP",null==o?void 0:o.className,{"tabs__item--active":s===t}),children:null!=n?n:t},t)})})}function m(e){let{lazy:t,children:n,selectedValue:o}=e,l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){let e=l.find(e=>e.props.value===o);return e?(0,s.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:l.map((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==o}))})}function b(e){let t=function(e){let{defaultValue:t,queryString:n=!1,groupId:a}=e,r=function(e){let{values:t,children:n}=e;return(0,s.useMemo)(()=>{let e=null!=t?t:p(n).map(e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}});return!function(e){let t=(0,d.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(t.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[t,n])}(e),[o,g]=(0,s.useState)(()=>(function(e){var t;let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:a}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(n,'" but none of its children has the corresponding value. Available values are: ').concat(a.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return n}let s=null!==(t=a.find(e=>e.default))&&void 0!==t?t:a[0];if(!s)throw Error("Unexpected error: 0 tabValues");return s.value})({defaultValue:t,tabValues:r})),[f,m]=function(e){let{queryString:t=!1,groupId:n}=e,a=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n});return[(0,c._X)(r),(0,s.useCallback)(e=>{if(!r)return;let t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})},[r,a])]}({queryString:n,groupId:a}),[b,j]=function(e){let{groupId:t}=e,n=t?"docusaurus.tab.".concat(t):null,[a,r]=(0,u.Nk)(n);return[a,(0,s.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:a}),x=(()=>{let e=null!=f?f:b;return h({value:e,tabValues:r})?e:null})();return(0,i.Z)(()=>{x&&g(x)},[x]),{selectedValue:o,selectValue:(0,s.useCallback)(e=>{if(!h({value:e,tabValues:r}))throw Error("Can't select invalid tab value=".concat(e));g(e),m(e),j(e)},[m,j,r]),tabValues:r}}(e);return(0,a.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList__CuJ"),children:[(0,a.jsx)(f,{...t,...e}),(0,a.jsx)(m,{...t,...e})]})}function j(e){let t=(0,g.Z)();return(0,a.jsx)(b,{...e,children:p(e.children)},String(t))}},2079:function(e,t,n){n.d(t,{Z:()=>o});var a=n("5893");n("7294");let s="dot_iyam",r="menuBar_WzY4",o=e=>{let{children:t}=e;return(0,a.jsxs)("div",{className:"card_GRg2",children:[(0,a.jsxs)("div",{className:"header_XfNy",children:[(0,a.jsxs)("div",{style:{whiteSpace:"nowrap"},children:[(0,a.jsx)("span",{className:s,style:{backgroundColor:"rgb(242, 95, 88)"}}),(0,a.jsx)("span",{className:s,style:{backgroundColor:"rgb(251, 190, 60)"}}),(0,a.jsx)("span",{className:s,style:{backgroundColor:"rgb(88, 203, 66)"}})]}),(0,a.jsx)("div",{className:"addressBar_X0Gc",children:"http://localhost:3000"}),(0,a.jsx)("div",{style:{marginLeft:"auto"},children:(0,a.jsxs)("div",{children:[(0,a.jsx)("span",{className:r}),(0,a.jsx)("span",{className:r}),(0,a.jsx)("span",{className:r})]})})]}),(0,a.jsxs)("div",{className:"body_ikuQ",children:[(0,a.jsx)("div",{className:"html-card-page ".concat("pageSide_EDh8"," ").concat("webView_lqhL"),children:t[0]}),(0,a.jsx)("div",{className:"html-card-code ".concat("codeSide_OQWj"),children:t[1]})]})]})}},65:function(e,t,n){n.d(t,{Z:function(){return l},a:function(){return o}});var a=n(7294);let s={},r=a.createContext(s);function o(e){let t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);